#!/usr/bin/env python3

import configparser
from functools import reduce
import io
import itertools
import os
from pathlib import Path
import shutil
from string import Template

import models

from jsmin import jsmin
from cssmin import cssmin

ROOT_PATH = Path(__file__).parent.resolve()
STATIC_PATH = ROOT_PATH.joinpath('static')
JS_PATH = STATIC_PATH.joinpath('js')
TEMPLATES_PATH = ROOT_PATH.joinpath('templates')
JS_LIBS = ['jquery', 'popper', 'bootstrap', 'unitegallery', 'ug-theme-tiles']
CSS_LIBS = ['bootstrap', 'style', 'unite-gallery']

config = configparser.ConfigParser()
config.read(Path(__file__).parent.joinpath('config.ini').resolve())
section = os.environ.get('CONFIG', 'DEFAULT')
cnf = config[section]

dist_path = Path(cnf.get('dist_dir')).expanduser().resolve()
shutil.rmtree(dist_path, ignore_errors=True)
shutil.copytree(src=ROOT_PATH.joinpath('static', 'img'),
                dst=dist_path.joinpath('img'))

# Asset concatenation and minification
js_libs = [JS_PATH.joinpath(f'{js_lib}.js') for js_lib in JS_LIBS]
js_buf = io.StringIO()
reduce(lambda buf, path: buf.write(path.read_text()) and buf, js_libs, js_buf)
js_dist_path = dist_path.joinpath('js')
js_dist_path.mkdir()
js_dist_path.joinpath('js_all.js').write_text(jsmin(js_buf.getvalue()))
css_libs = [STATIC_PATH.joinpath('css', f'{css_lib}.css') for css_lib in CSS_LIBS]
css_buf = io.StringIO()
reduce(lambda buf, path: buf.write(path.read_text()) and buf, css_libs, css_buf)
css_dist_path = dist_path.joinpath('css')
css_dist_path.mkdir()
css_dist_path.joinpath('css_all.css').write_text(cssmin(css_buf.getvalue()))

pics_dir = os.environ.get('PICS_DIR', cnf.get('pics_dir'))
photo_exts = cnf.get('photo_exts').split(',')
pic = models.Picture(pics_dir=pics_dir, photo_exts=photo_exts)
folders = pic.folders()


# / => index.html
css_classes = itertools.cycle(['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'])
idx_content = [
f'''
<a href="/{ folder }.html"
    class="list-group-item list-group-item-action list-group-item-{ css_class } folder">
    { folder }
</a>
'''
for (folder, css_class) in zip(folders, css_classes)
]
index_tpl = TEMPLATES_PATH.joinpath('index.html').read_text()
index = Template(index_tpl).substitute(CONTENT=''.join(idx_content))

if cnf.getboolean('group_months_by_year'):
    group_months_by_year_js = JS_PATH.joinpath('group_months_by_year.js').read_text()
    js_tag = f"""
<script type="text/javascript">
    {group_months_by_year_js}
</script>
    """
else:
    js_tag = ''

layout_tpl = TEMPLATES_PATH.joinpath('layout.html').read_text()
title_prefix = cnf.get('title_prefix')
index_html = Template(layout_tpl).substitute(TITLE_PREFIX=title_prefix,
                                             CONTENT=(index + js_tag))
dist_path.joinpath('index.html').write_text(index_html)


# /FOLDER => show.html
show_tpl = TEMPLATES_PATH.joinpath('show.html').read_text()
for folder in folders:
    pictures = pic.from_folder(folder)
    show_content = [
    f'''
    <a href="#">
        <img alt=""
            src="{ picture.thumb_fname() }"
            data-image="{ picture.path }"
            data-description=""
            style="display:none">
    </a>
    '''
    for picture in pictures
    ]
    show = Template(show_tpl).substitute(CONTENT=''.join(show_content))
    show_html = Template(layout_tpl).substitute(TITLE_PREFIX=title_prefix,
                                                CONTENT=show)
    dist_path.joinpath(f'{folder}.html').write_text(show_html)


if cnf.getboolean('dev'):
    shutil.copytree(src=Path(pics_dir).expanduser().resolve(),
                    dst=dist_path.joinpath('pictures'))
