#!/usr/bin/env python3

from configparser import ConfigParser
import itertools
import os
from pathlib import Path
import shutil
from string import Template

import models

ROOT_PATH = Path(__file__).parent.resolve()
TEMPLATES_PATH = ROOT_PATH.joinpath('templates')

config = ConfigParser()
config.read(Path(__file__).parent.joinpath('config.ini').resolve())
section = os.environ.get('CONFIG', 'DEFAULT')
cnf = config[section]

dist_path = Path(cnf.get('dist_dir')).expanduser().resolve()
shutil.rmtree(dist_path, ignore_errors=True)
shutil.copytree(src=ROOT_PATH.joinpath('static'), dst=dist_path)

pics_dir = cnf.get('pics_dir')
photo_exts = cnf.get('photo_exts').split(',')
pic = models.Picture(pics_dir=pics_dir, photo_exts=photo_exts)
folders = pic.folders()


# / => index.html
css_classes = itertools.cycle(['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'])
idx_content = [
f'''
<a href="/{ folder }.html"
    class="list-group-item list-group-item-action list-group-item-{ css_class } folder">
    { folder }
</a>
'''
for (folder, css_class) in zip(folders, css_classes)
]
index_tpl = TEMPLATES_PATH.joinpath('index.html').read_text()
index = Template(index_tpl).substitute(CONTENT=''.join(idx_content))

layout_tpl = TEMPLATES_PATH.joinpath('layout.html').read_text()
index_html = Template(layout_tpl).substitute(CONTENT=index)
dist_path.joinpath('index.html').write_text(index_html)


# /FOLDER => show.html
show_tpl = TEMPLATES_PATH.joinpath('show.html').read_text()
for folder in folders:
    pictures = pic.from_folder(folder)
    show_content = [
    f'''
    <a href="#">
        <img alt=""
            src="{ picture.thumb_fname() }"
            data-image="{ picture.path }"
            data-description=""
            style="display:none">
    </a>
    '''
    for picture in pictures
    ]
    show = Template(show_tpl).substitute(CONTENT=''.join(show_content))
    show_html = Template(layout_tpl).substitute(CONTENT=show)
    dist_path.joinpath(f'{folder}.html').write_text(show_html)


if cnf.getboolean('dev'):
    shutil.copytree(src=Path(pics_dir).expanduser().resolve(),
                    dst=dist_path.joinpath('pictures'))
